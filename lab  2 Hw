/*import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.util.Random;
import java.applet.*;
import javax.swing.*;
import javax.swing.JApplet;*/

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.util.Random;

import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

public class ScreenSaver extends JApplet implements Runnable { ///sdlkdlskmcllsm

	final int MAXOBJECTS = 20; // maximum number of objects to be drawn
	final int XLEFTMOST = 0; // left most x-coordinate of the screen
	final int XRIGHTMOST = 700; // right most x-coordinate of the screen
	final int YTOPMOST = 0; // top most y-coordinate of the screen
	final int YBOTTOMMOST = 500; // bottom most y-coordinate of the screen
	final int MAXWIDTH = 100; // maximum width of an object
	Shape[] shapes = new Shape[MAXOBJECTS]; // store objects to draw
	int[] upOrDowns = new int[MAXOBJECTS]; // store direction of each object
	Random ranDomShapeID = new Random(); // object used for creating random
											// integer
	Thread Draw;
	int delay = 300;
	int x;
	int speed[] = new int[MAXOBJECTS];
	Dialog dialog  = new Dialog(null);
	boolean y = false;
	int spd =1;
	
	

	@Override
	public void init() {
		Draw = new Thread(this);
		createShapes();
		setSize(700, 500);
		dialog.setVisible(true);
		for(int i=0;i<shapes.length;i++){
			if(i<x){
				while(i != 0 && isInVacantSpace(i)){
					shapes[i] = getEllipse();
				}
			}
			else{
				while(i != 0 && isInVacantSpace(i)){
					shapes[i] = getSquare();
				}
			}
		}

	}

	@Override
	public void start() {
		
	}

	@Override
	public void paint(Graphics g) {
		g.getColor();
		g.setColor(Color.white);
		g.fillRect(0, 0, 700, 500);
		Graphics2D g2 = (Graphics2D) g;
		for (int i = 0; i < MAXOBJECTS; i++) {
			g2.setColor(Color.BLUE);
			moveShapes();
			g2.fill(shapes[i]);
		}
	}

	public void createShapes() {
		int x = ranDomShapeID.nextInt(MAXOBJECTS);
		for (int i = 0; i < shapes.length; i++) {
			if (i < x) {
				shapes[i] = getEllipse();

			} else {
				shapes[i] = getSquare();

			}
			speed[i] = spd;

		}
	}

	public Ellipse2D.Double getEllipse() {
		int width = ranDomShapeID.nextInt(MAXWIDTH);
		Ellipse2D.Double el = new Ellipse2D.Double(
				ranDomShapeID.nextInt((XRIGHTMOST - width) - (width) + 1)
						+ width, ranDomShapeID.nextInt((YBOTTOMMOST - width)
						- (width) + 1)
						+ width, width, width);
		return el;
	}

	public Rectangle2D.Double getSquare() {
		int width = ranDomShapeID.nextInt(MAXWIDTH);
		Rectangle2D.Double re = new Rectangle2D.Double(
				ranDomShapeID.nextInt((XRIGHTMOST - width) - (width) + 1)
						+ width, ranDomShapeID.nextInt((YBOTTOMMOST - width)
						- (width) + 1)
						+ width, width, width);
		return re;
	}
class Dialog extends JDialog{
	public Dialog(JFrame parent) {
		super(parent);
		this.setLayout(new BorderLayout());
		JButton ok = new JButton("OK");
		JLabel text = new JLabel("Press OK to move");
		text.setHorizontalAlignment(SwingConstants.CENTER);
		this.add(text, BorderLayout.CENTER);
		this.add(ok, BorderLayout.SOUTH);
		ok.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				dispose();
				y = true;
				Draw.start();
			}
		});
		setSize(300, 150);
	}
	
}

public void moveShapes(){
	for (int i = 0; i < shapes.length; i++) {
		if (i < x) {
			int sp = (int) ((RectangularShape) shapes[i]).getY();
			sp = sp + speed[i];
			shapes[i] = new Ellipse2D.Double(
					((RectangularShape) shapes[i]).getX(), sp,
					((RectangularShape) shapes[i]).getWidth(),
					((RectangularShape) shapes[i]).getHeight());
			if (sp + ((RectangularShape) shapes[i]).getWidth() >= YBOTTOMMOST
					|| sp <= YTOPMOST) {
				speed[i] = -1 * speed[i];
			}
		} else {
			int sp = (int) ((RectangularShape) shapes[i]).getY();
			sp = sp + speed[i];
			shapes[i] = new Rectangle2D.Double(
					((RectangularShape) shapes[i]).getX(), sp,
					((RectangularShape) shapes[i]).getWidth(),
					((RectangularShape) shapes[i]).getHeight());
			if (sp + ((RectangularShape) shapes[i]).getWidth() >= YBOTTOMMOST
					|| sp <= YTOPMOST) {
				speed[i] = -1 * speed[i];
			}
		}
	}
	
}
private boolean isInVacantSpace(int i) {
	boolean temp = false;
	for(int j = 0; j < i; j++){
		temp = temp || shapes[i].getBounds2D().intersects(shapes[j].getBounds2D());
	}
	return temp;
}
	@Override
	public void run() {
		while (y !=false) {
			try {
				Thread.sleep(delay);
				this.repaint();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}

}
